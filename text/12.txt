Parsers y el Abstract Syntax Tree

¿Que hace un JS Engine?
- Recibe codigo fuente
- Parsea el codigo y producr un Absract Syntax Tree (ATS)
- Se compila a bytecode y se ejecuta
- Se optimiza a machine code y se reemplaza el codigo base

El JS Engine recibe el código fuente y lo procesa de la siguiente manera:

    El parser descompone y crea tokens que integran el AST.
    Se compila a bytecode y se ejecuta.
    Lo que se pueda se optimiza a machine code y se reemplaza el código base.

Un SyntaxError es lanzado cuando el motor JavaScript encuentra partes que no forman parte de la sintaxis del lenguaje y esto lo logra gracias a que se tiene un AST generado por el parser.

El parser es del 15% al 20% del proceso de ejecución por lo que hay que usar parser del código justo en el momento que lo necesitamos y no antes de saber si se va a usar o no.
Parser de V8
Eager Parsing
- Ecnuentra errores de sintaxis
- Crea el AST
- Contruye scopes

Lazy Parsing
-Doble rapido que el Eager
- No crea el AST
- Construye los scopes parcialmente

AST
Es un grafo, estructura en forma de arbol
Se usa en:
- JavaScript Engine
- Bundlers: webpack, rollup, parcel
- Transpilers: babel
- Linters: eslint, pretify
- Type checkers: typescript, flow
- Syntax highlighters




